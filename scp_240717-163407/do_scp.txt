def do_scp(pp_env: pest_pde.Env, scp_env: SCPEnv) -> str:
    # Define constants
    #pp_env = pest_pde.Env()
    n_s = pp_env.n**2
    n = 3*n_s  # state dimension
    if pp_env.u_mode == pest_pde.ControlMode.Aerial:
        m = 1 # control dimension
    else:
        m = n_s # control dimension
    s0, u0 = pest_pde.init_state(pp_env)
    dt = pp_env.dt  # discrete time resolution
    T = pp_env.T  # total simulation time
    # we want crops at what we can expect at time t
    # we want pest at 0
    # we want pesticide at 0
    if scp_env.c_target_compute:
        crop_target = pest_pde.crop_function(pp_env, T)
    else:
        crop_target = scp_env.c_target
    print('crop_target: ' + str(crop_target))
    # scale all by FD cell area. note we all scale by area below
    h = pp_env.D / (pp_env.n - 1)
    h2 = h * h
    # hmm, should we weight by this, or...
    #area_mat = pest_pde.build_area_matrix(pp_env)
    s_goal = np.concatenate([crop_target * np.ones((n_s,)),
                             scp_env.p_target*np.ones((n_s,)),
                             scp_env.w_target*np.ones((n_s,))])  # desired field state
    goal_weights = np.concatenate([scp_env.c_wt*np.ones((n_s,)), scp_env.p_wt*np.ones((n_s,)), scp_env.w_wt*np.ones((n_s,))])
    P = h2 * scp_env.P_wt * np.diag(goal_weights)
    #P = 1e2 * np.eye(n)  # terminal state cost matrix
    Q = h2 * scp_env.Q_wt * np.diag(goal_weights)
    #Q = 1e3 * np.eye(n) # state cost matrix
    #Q = 0.0 * np.eye(n) # state cost matrix
    if pp_env.u_mode == pest_pde.ControlMode.Aerial:
        # note we need to adjust this by the length of
        # the u_pattern used in the pde. I am assuming
        # it is a constant here!
        R = h2 * scp_env.R_wt * pp_env.n**2 # control cost
    else:
        R = h2 * scp_env.R_wt * np.eye(m)  # control cost matrix
    rho = scp_env.rho  # trust region parameter
    u_max = scp_env.u_max  # control effort bound
    eps = scp_env.eps  # convergence tolerance
    max_iters = scp_env.max_iters  # maximum number of SCP iterations

    pest = pest_pde.PestSim(pp_env)
    # Initialize the discrete-time dynamics
    if pp_env.u_mode == pest_pde.ControlMode.Spot:
        fd = jax.jit(discretize(pest.pests_wrapper_su_jax, dt))
    else:
        fd = jax.jit(discretize(pest.pests_wrapper_aerial_su_jax, dt))

    t = np.arange(0.0, T + dt, dt)
    N = t.size - 1
    s, u, J = solve_scp(scp_env, fd, s0, s_goal, N, P, Q, R, u_max, rho, eps, max_iters)

    rdir = serialize_scp_run(s, u, J, pest, scp_env)
    return rdir
