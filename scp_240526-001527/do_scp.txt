def do_scp(pp_env: pest_pde.Env):
    # Define constants
    #pp_env = pest_pde.Env()
    n_s = pp_env.n**2
    n = 3*n_s  # state dimension
    if pp_env.u_mode == pest_pde.ControlMode.Aerial:
        m = 1 # control dimension
    else:
        m = n_s # control dimension
    s0, u0 = pest_pde.init_state(pp_env)
    dt = 0.1  # discrete time resolution
    T = 10.0  # total simulation time
    # we want crops at what we can expect at time t
    # we want pest at 0
    # we want pesticide at 0
    crop_target = pest_pde.crop_function(pp_env, T)
    s_goal = np.concatenate([crop_target * np.ones((n_s,)), np.zeros((n_s,)), np.zeros((n_s,))])  # desired field state
    P = 1e3 * np.eye(n)  # terminal state cost matrix
    Q = 1e2 * np.eye(n) # state cost matrix
    #Q = 0.0 * np.eye(n) # state cost matrix
    if pp_env.u_mode == pest_pde.ControlMode.Aerial:
        R = 1e-1  # control cost
    else:
        R = 1e-1 * np.eye(m)  # control cost matrix
    ρ = 0.5  # trust region parameter
    u_max = 0.5  # control effort bound
    eps = 5e-2  # convergence tolerance
    max_iters = 100  # maximum number of SCP iterations
    animate = False  # flag for animation

    pest = pest_pde.PestSim(pp_env)
    # Initialize the discrete-time dynamics
    if pp_env.u_mode == pest_pde.ControlMode.Spot:
        fd = jax.jit(discretize(pest.pests_wrapper_su_jax, dt))
    else:
        fd = jax.jit(discretize(pest.pests_wrapper_aerial_su_jax, dt))

    # Solve the swing-up problem with SCP
    t = np.arange(0.0, T + dt, dt)
    N = t.size - 1
    s, u, J = solve_swingup_scp(fd, s0, s_goal, N, P, Q, R, u_max, ρ, eps, max_iters)

    serialize_scp_run(s, u, J, pest)

    # Simulate open-loop control
    #for k in range(N):
    #    s[k + 1] = fd(s[k], u[k])
